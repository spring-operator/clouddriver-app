buildscript {
	ext {
		springBootVersion = '1.4.4.RELEASE'
		clouddriverVersion = '1.439.0-0.3.0.BUILD-SNAPSHOT'
		clouddriverAppVersion = '1.0.2.BUILD-SNAPSHOT'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'

jar {
	baseName = 'clouddriver-app'
	version = clouddriverAppVersion
}

/**
 * No need to create your own Main. Simply use the one provided upstream.
 */
springBoot {
	mainClass = 'com.netflix.spinnaker.clouddriver.Main'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url "https://spinnaker.bintray.com/gradle" }
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/release" }
}


dependencies {
	compile "org.springframework.spinnaker.clouddriver:clouddriver-web:${clouddriverVersion}"
	compile "org.apache.tomcat:tomcat-util:8.0.24"
}

configurations.all {
	exclude group: 'javax.servlet', module: 'servlet-api'
	exclude group: 'javax.ws.rs', module: 'jsr311-api'

	resolutionStrategy {
		eachDependency {
			if (it.requested.group.startsWith('org.apache.tomcat')) {
				it.useVersion '8.0.24'
			}
			if (it.requested.group == 'com.fasterxml' && it.requested.name == 'classmate') {
				it.useVersion '1.2.0'
			}
			if (it.requested.group == 'org.cloudfoundry') {
				it.useVersion '2.0.4.RELEASE'
			}
			if (it.requested.group == 'org.springframework.cloud' && it.requested.name == 'spring-cloud-deployer-cloudfoundry') {
				it.useVersion '1.0.1.RELEASE'
			}
			if (it.requested.group == 'org.springframework.cloud' &&
					(it.requested.name == 'spring-cloud-deployer-spi' || it.requested.name == 'spring-cloud-deployer-resource-maven')) {
				it.useVersion '1.0.2.RELEASE'
			}
			if (it.requested.group == 'io.projectreactor' && it.requested.name == 'reactor-core') {
				it.useVersion '3.0.3.RELEASE'
			}
		}
	}
}

eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

// make sure bootRepackage is included in task graph
project.tasks.findAll { it.name.startsWith("publish") } .each { it.dependsOn assemble }

/**
 * To publish clouddriver-app to an artifactory repository, do this:
 *
 * USERNAME=<username> PASSWORD=<password> ./gradlew publish
 */
publishing {
	repositories {
		if ("${clouddriverAppVersion}".endsWith(".BUILD-SNAPSHOT")) {
			println "Adding libs-snapshot-local repo as target for publishing maven artifacts..."
			maven {
				url "https://repo.spring.io/libs-snapshot-local"
				credentials {
					username System.getenv()['USERNAME']
					password System.getenv()['PASSWORD']
				}
			}
		} else if ("${clouddriverAppVersion}".endsWith(".RELEASE")) {
			println "Adding libs-release-local repo as target for publishing maven artifacts..."
			maven {
				url "https://repo.spring.io/libs-release-local"
				credentials {
					username System.getenv()['USERNAME']
					password System.getenv()['PASSWORD']
				}
			}
		} else {
			println "Adding libs-milestone-local repo as target for publishing maven artifacts..."
			maven {
				url "https://repo.spring.io/libs-milestone-local"
				credentials {
					username System.getenv()['USERNAME']
					password System.getenv()['PASSWORD']
				}
			}
		}
	}

	publications {
		maven(MavenPublication) {
			groupId 'org.springframework.spinnaker'
			artifactId 'clouddriver-app'
			version "${clouddriverAppVersion}"

			artifact ("$buildDir/libs/${project.name}-${clouddriverAppVersion}.jar")
		}
	}
}
